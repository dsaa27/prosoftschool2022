#include "mul41.hxx"
#include <cassert>
#include <iostream>
#include <string>
using namespace std;

int
main(void) {
    cout << __FILE_NAME__ << endl;

    {
        cout << "Empty message" << endl;

        const dms::encoder::mul41 mul41{};
        const string plain_text_in{};

        const string cipher_text{mul41.encode(plain_text_in)};
        assert(cipher_text.empty());

        const string plain_text_out{mul41.decode(cipher_text)};
        assert(plain_text_out.empty());
    }

    {
        cout << "Only \\0" << endl;

        const dms::encoder::mul41 mul41{};
        const string plain_text_in{'\0', '\0', '\0'};

        const string expected_cipher_text{'0', '0', '0'};
        const string cipher_text{mul41.encode(plain_text_in)};

        assert(3u == cipher_text.length());
        assert(expected_cipher_text == cipher_text);

        const string plain_text_out{mul41.decode(cipher_text)};

        assert(3u == plain_text_out.length());
        assert(plain_text_in == plain_text_out);
    }

    {
        cout << "Fender\\0Fe" << endl;
        const dms::encoder::mul41 mul41{};

        // Fender\0Fe
        const string plain_text_in{70, 101, 110, 100, 101, 114, 0, 70, 101};

        // 70 * 41 = 2870 (4 симв. -> 0x11)
        // 101 * 41 = 4141 (4 -> 0x11)
        // 110 * 41 = 4510 (4 -> 0x11)
        // 114 * 41 =  4674 (4 -> 0x11)

        const string expected_cipher_text{
            0x11, '2', '8', '7',  '0',  0x11, '4', '1', '4', '1',  0x11,
            '4',  '5', '1', '0',  0x11, '4',  '1', '0', '0', 0x11, '4',
            '1',  '4', '1', 0x11, '4',  '6',  '7', '4', '0', 0x11, '2',
            '8',  '7', '0', 0x11, '4',  '1',  '4', '1'};

        const string cipher_text{mul41.encode(plain_text_in)};
        assert(cipher_text == expected_cipher_text);

        const string plain_text_out{mul41.decode(cipher_text)};
        assert(plain_text_in == plain_text_out);
    }

    {
        cout << "0, 1, ..., 127 message" << endl;
        const dms::encoder::mul41 mul41{};

        const string plain_text_in{
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
            13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
            26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
            39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
            52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
            65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
            78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
            91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103,
            104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
            117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};

        const string expected_cipher_text{
            '0',  0x31, '4',  '1',  0x31, '8',  '2',  0x23, '1',  '2',  '3',
            0x23, '1',  '6',  '4',  0x23, '2',  '0',  '5',  0x23, '2',  '4',
            '6',  0x23, '2',  '8',  '7',  0x23, '3',  '2',  '8',  0x23, '3',
            '6',  '9',  0x23, '4',  '1',  '0',  0x23, '4',  '5',  '1',  0x23,
            '4',  '9',  '2',  0x23, '5',  '3',  '3',  0x23, '5',  '7',  '4',
            0x23, '6',  '1',  '5',  0x23, '6',  '5',  '6',  0x23, '6',  '9',
            '7',  0x23, '7',  '3',  '8',  0x23, '7',  '7',  '9',  0x23, '8',
            '2',  '0',  0x23, '8',  '6',  '1',  0x23, '9',  '0',  '2',  0x23,
            '9',  '4',  '3',  0x23, '9',  '8',  '4',  0x11, '1',  '0',  '2',
            '5',  0x11, '1',  '0',  '6',  '6',  0x11, '1',  '1',  '0',  '7',
            0x11, '1',  '1',  '4',  '8',  0x11, '1',  '1',  '8',  '9',  0x11,
            '1',  '2',  '3',  '0',  0x11, '1',  '2',  '7',  '1',  0x11, '1',
            '3',  '1',  '2',  0x11, '1',  '3',  '5',  '3',  0x11, '1',  '3',
            '9',  '4',  0x11, '1',  '4',  '3',  '5',  0x11, '1',  '4',  '7',
            '6',  0x11, '1',  '5',  '1',  '7',  0x11, '1',  '5',  '5',  '8',
            0x11, '1',  '5',  '9',  '9',  0x11, '1',  '6',  '4',  '0',  0x11,
            '1',  '6',  '8',  '1',  0x11, '1',  '7',  '2',  '2',  0x11, '1',
            '7',  '6',  '3',  0x11, '1',  '8',  '0',  '4',  0x11, '1',  '8',
            '4',  '5',  0x11, '1',  '8',  '8',  '6',  0x11, '1',  '9',  '2',
            '7',  0x11, '1',  '9',  '6',  '8',  0x11, '2',  '0',  '0',  '9',
            0x11, '2',  '0',  '5',  '0',  0x11, '2',  '0',  '9',  '1',  0x11,
            '2',  '1',  '3',  '2',  0x11, '2',  '1',  '7',  '3',  0x11, '2',
            '2',  '1',  '4',  0x11, '2',  '2',  '5',  '5',  0x11, '2',  '2',
            '9',  '6',  0x11, '2',  '3',  '3',  '7',  0x11, '2',  '3',  '7',
            '8',  0x11, '2',  '4',  '1',  '9',  0x11, '2',  '4',  '6',  '0',
            0x11, '2',  '5',  '0',  '1',  0x11, '2',  '5',  '4',  '2',  0x11,
            '2',  '5',  '8',  '3',  0x11, '2',  '6',  '2',  '4',  0x11, '2',
            '6',  '6',  '5',  0x11, '2',  '7',  '0',  '6',  0x11, '2',  '7',
            '4',  '7',  0x11, '2',  '7',  '8',  '8',  0x11, '2',  '8',  '2',
            '9',  0x11, '2',  '8',  '7',  '0',  0x11, '2',  '9',  '1',  '1',
            0x11, '2',  '9',  '5',  '2',  0x11, '2',  '9',  '9',  '3',  0x11,
            '3',  '0',  '3',  '4',  0x11, '3',  '0',  '7',  '5',  0x11, '3',
            '1',  '1',  '6',  0x11, '3',  '1',  '5',  '7',  0x11, '3',  '1',
            '9',  '8',  0x11, '3',  '2',  '3',  '9',  0x11, '3',  '2',  '8',
            '0',  0x11, '3',  '3',  '2',  '1',  0x11, '3',  '3',  '6',  '2',
            0x11, '3',  '4',  '0',  '3',  0x11, '3',  '4',  '4',  '4',  0x11,
            '3',  '4',  '8',  '5',  0x11, '3',  '5',  '2',  '6',  0x11, '3',
            '5',  '6',  '7',  0x11, '3',  '6',  '0',  '8',  0x11, '3',  '6',
            '4',  '9',  0x11, '3',  '6',  '9',  '0',  0x11, '3',  '7',  '3',
            '1',  0x11, '3',  '7',  '7',  '2',  0x11, '3',  '8',  '1',  '3',
            0x11, '3',  '8',  '5',  '4',  0x11, '3',  '8',  '9',  '5',  0x11,
            '3',  '9',  '3',  '6',  0x11, '3',  '9',  '7',  '7',  0x11, '4',
            '0',  '1',  '8',  0x11, '4',  '0',  '5',  '9',  0x11, '4',  '1',
            '0',  '0',  0x11, '4',  '1',  '4',  '1',  0x11, '4',  '1',  '8',
            '2',  0x11, '4',  '2',  '2',  '3',  0x11, '4',  '2',  '6',  '4',
            0x11, '4',  '3',  '0',  '5',  0x11, '4',  '3',  '4',  '6',  0x11,
            '4',  '3',  '8',  '7',  0x11, '4',  '4',  '2',  '8',  0x11, '4',
            '4',  '6',  '9',  0x11, '4',  '5',  '1',  '0',  0x11, '4',  '5',
            '5',  '1',  0x11, '4',  '5',  '9',  '2',  0x11, '4',  '6',  '3',
            '3',  0x11, '4',  '6',  '7',  '4',  0x11, '4',  '7',  '1',  '5',
            0x11, '4',  '7',  '5',  '6',  0x11, '4',  '7',  '9',  '7',  0x11,
            '4',  '8',  '3',  '8',  0x11, '4',  '8',  '7',  '9',  0x11, '4',
            '9',  '2',  '0',  0x11, '4',  '9',  '6',  '1',  0x11, '5',  '0',
            '0',  '2',  0x11, '5',  '0',  '4',  '3',  0x11, '5',  '0',  '8',
            '4',  0x11, '5',  '1',  '2',  '5',  0x11, '5',  '1',  '6',  '6',
            0x11, '5',  '2',  '0',  '7'};

        const string cipher_text{mul41.encode(plain_text_in)};
        assert(expected_cipher_text == cipher_text);

        const string plain_text_out{mul41.decode(cipher_text)};
        assert(plain_text_in == plain_text_out);
    };
}
